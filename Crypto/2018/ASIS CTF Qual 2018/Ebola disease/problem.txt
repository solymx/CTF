def encrypt(m, r, pubkey):
    s, n = pubkey
    assert m <= r
    u = getRandomRange(1, n - 1)
    c = (pow(s, m, n) * pow(u, r, n)) % n
    return c


def keygen(r, nbit):
    while True:
        p = 2 * r * getPrime(nbit - len(bin(r)[2:]) - 1) + 1
        q = gmpy.next_prime(Const + getRandomRange(1, r))
        if gmpy.is_prime(p):
            if gcd(r, q-1) == 1:
                break
    n, phi = p * q, (p-1)*(q-1)
    while True:
        s = getRandomRange(1, n - 1)
        t = pow(s, phi / r, n)
        if t != 1:
            break
    pubkey = (long(s), long(n))
    return pubkey


Public key = (4894391172640988374038818498257268014664245095384830088112045647220433754616368475198447522070212734826128551613639798727257063799328404917799205175479215117674476846436246684663103663515342618672373484938750440428621458326991728701310355024263329507846145001810869010169881111142988216959574030917825887002L, 47916867369183287060118987344624741048354374872828722761206515756444108218869704536435373038821733760980092937386850201259178873753886754767472843182370848598985809665532899485769003297287749559204798574233974979633857907664604029274597792206909618665122772887918951768904870299836674740553947515462115752447L)

Cipher text = 6900471090260862058716609024419506768886497585969785868370875300309669288889887682742155262414762853828830468264925150692281221998299715870688569800007227762212365076481806472729284710278693555073458259129904066376653889378181668692509652152105558404718968711775301245776973437054854686972541903634686103625

